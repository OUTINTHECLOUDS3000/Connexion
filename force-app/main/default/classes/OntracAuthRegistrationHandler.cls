//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class OntracAuthRegistrationHandler implements Auth.RegistrationHandler{
    public virtual class BaseException extends Exception {}
    public class OtherException extends BaseException {}
    
    global boolean canCreateUser(Auth.UserData data) {
        //TODO: Check whether we want to allow creation of a user with this data
        Map<String, String> costomizeAttributes = data.attributeMap;
        if(costomizeAttributes.get('custom:bac')==null || costomizeAttributes.get('custom:bac')=='' || data.email==null || data.email=='' || (data.firstName==null || data.firstName=='') ||(data.lastName==null || data.lastName=='')){
            return false;
        }
        return true;
    }
    
    global User createUser(Id portalId, Auth.UserData data){
        System.debug(data);
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            System.debug('not creating');
            return null;
        }
        System.debug('creating community id'+ data.attributeMap.get('sfdc_networkid'));
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            System.debug('creating community id');
            //We have a community id, so create a user with community access
            //Get an actual account:
            String userBac = data.attributeMap.get('custom:bac');
            Account account = [SELECT Id FROM account WHERE BAC__c = :userBac];
            if(account == null) {
                System.debug('No valid account found for bac' + userBac);
                throw new OtherException('Invalid bac access');
            }
            System.debug('creating contact in community'+account);
            // creating a contact
            Contact newContact = upsertContact(account.Id, data.email, data.firstName, data.lastName);
            
            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            System.debug('creating user in community'+account);
            User u = getUser(data.email);
            if (u == null) {
                u = new User();
                Profile profile = [SELECT Id FROM profile WHERE name='On/CXZ TRAC Community User'];
                u.username = data.email;
                u.email = data.email;
                u.lastName = data.lastName;
                u.firstName = data.firstName;
                String alias = data.firstName + data.lastName;
                //Alias must be 8 characters or less
                System.debug(alias+'creating user alias');
                if(alias.length() > 8) {
                    alias = alias.substring(0, 8);
                }
                u.alias = alias;
                System.debug(profile + 'creating user profile');
                u.profileId = profile.Id;
                u.contactId = newContact.Id;
                u.languagelocalekey = 'en_US';
                u.localesidkey = 'en_US';
                u.emailEncodingKey = 'UTF-8';
                u.timeZoneSidKey = 'America/Los_Angeles';
                System.debug('creating ended:');
                System.debug(u);
            }
            return u;
        } else {
            // we do not create other users:
            throw new OtherException('Invalid user');
        }
    }
    
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        System.debug(data);
        System.debug('inupdate'+userId);
        User u = new User(id=userId);
        //TODO: Customize the username. Must be 80 characters or less.
        u.username = data.email;
        u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName;
        String alias = data.firstName + data.lastName;
        //String alias = data.username;
        //Alias must be 8 characters or less
        if(alias.length() > 8) {
            alias = alias.substring(0, 8);
        }
        u.alias = alias;
        System.debug('update');
        update(u);
    }
    private Contact upsertContact(string accountId, string userEmail, string userFirstName, string userLastName) {
        List <Contact> cList = [SELECT Id FROM Contact WHERE email =: userEmail];
        Contact c = new Contact();
        if (cList == null || cList.size() == 0) {
            c.accountId = accountId;
            c.email = userEmail;
            c.firstName = userFirstName;
            c.lastName = userLastName;
            insert(c);
        } else {
            c = cList[0];
        }
        return c;
    }
    
    private User getUser(string userEmail) {
        string username = userEmail;
        List<User> u = [select id from USER where email =: userEmail and Isactive = true];
        if (u != null && u.size() > 0)
            return u[0];
        else return null;
        
    }
}