//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class CxztracAuthRegistrationOldHandler implements Auth.RegistrationHandler{
    public virtual class BaseException extends Exception {}
    public class OtherException extends BaseException {}
    global boolean canCreateUser(Auth.UserData data) {
        //Check whether we want to allow creation of a user with this data
        Map<String, String> customizeAttributes = data.attributeMap;
        if(customizeAttributes.get('https://lot-app/dealerId')==null || customizeAttributes.get('https://lot-app/email')==null || customizeAttributes.get('https://lot-app/firstName')==null || customizeAttributes.get('https://lot-app/lastName')==null){
            return false;
        }
        return true;
    }
    
    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        System.debug('creating user');
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            //TODO: Get an actual account
            String userDealerId = data.attributeMap.get('https://lot-app/dealerId');
            String userEmail = data.attributeMap.get('https://lot-app/email');
            String userFirstName = data.attributeMap.get('https://lot-app/firstName');
            String userLastName = data.attributeMap.get('https://lot-app/lastName');
            String role = data.attributeMap.get('https://lot-app/role');
            System.debug('creating user1');
            Account account = [SELECT Id FROM account WHERE BAC__c=:userDealerId];
            System.debug('creating user2');
            if(account == null) {
                System.debug('No valid account found for bac' + userDealerId);
                throw new OtherException('Invalid dealerId access');
            }
            System.debug('found account!');
            System.debug(account);
            Contact c = new Contact();
            c.accountId = account.Id;
            c.email = userEmail;
            c.firstName = userFirstName;
            c.lastName = userLastName;
            insert(c);
            System.debug('new contact inserted!');
            System.debug(c);
            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='On/CXZ TRAC Community User'];
            u.username = userEmail + 'cxztrac';
            u.email = userEmail;
            u.lastName = userLastName;
            u.firstName = userFirstName;
            String alias = userFirstName + userLastName;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = 'en_US';
            u.localesidkey = 'en_US';
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            u.contactId = c.Id;
            u.CompanyName = userDealerId;
            u.Title = role;
            System.debug('creating user');
            System.debug(u);
            return u;
        } else {
            //This is not a community, so create a regular standard user
            // we do not create other users:
            throw new OtherException('Invalid user');
        }
    }
    
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        System.debug('updating user');
        String userDealerId = data.attributeMap.get('https://lot-app/dealerId');
        String userEmail = data.attributeMap.get('https://lot-app/email');
        String userFirstName = data.attributeMap.get('https://lot-app/firstName');
        String userLastName = data.attributeMap.get('https://lot-app/lastName');
        String role = data.attributeMap.get('https://lot-app/role');
        User u = new User(id=userId);    
        u.email = userEmail;
        u.lastName = userLastName;
        u.firstName = userFirstName;
        u.CompanyName = userDealerId;
        u.Title = role;
        String alias = userFirstName + userLastName;
        u.Title = role;
        //Alias must be 8 characters or less
        if(alias.length() > 8) {
            alias = alias.substring(0, 8);
        }
        u.alias = alias;
        update(u);
    }
}